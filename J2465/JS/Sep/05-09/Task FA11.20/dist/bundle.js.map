{"version":3,"file":"bundle.js","mappings":";;;;AA2BA,IAAM,QAAQ,GAAc;IAC1B;QACE,IAAI,EAAE,MAAM;QACZ,GAAG,EAAE,EAAE;QACP,MAAM,EAAE;YACN,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;SACZ;KACF;IACD;QACE,IAAI,EAAE,MAAM;QACZ,GAAG,EAAE,EAAE;QACP,MAAM,EAAE;YACN,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;SACZ;KACF;CACF,CAAC;AAEF,SAAS,eAAe,CAAC,QAA2B;IAClD,IAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAE,CAAC;IACzD,WAAW,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,yBAAyB;IAErD,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;QACvB,IAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;QACjC,UAAU,CAAC,WAAW,GAAG,gBAAS,OAAO,CAAC,IAAI,oBAAU,OAAO,CAAC,GAAG,qBAAW,OAAO,CAAC,MAAM,CAAC,IAAI,wBAAc,OAAO,CAAC,MAAM,CAAC,OAAO,wBAAc,OAAO,CAAC,MAAM,CAAC,OAAO,CAAE,CAAC;QAC5K,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AAED,kBAAkB;AAClB,eAAe,CAAC,QAAQ,CAAC,CAAC;AAE1B,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE;IAChE,IAAM,UAAU,GAAY;QAC1B,IAAI,EAAE,OAAO;QACb,GAAG,EAAE,EAAE;QACP,MAAM,EAAE;YACN,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;SACZ;KACF,CAAC;IACF,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,eAAe,CAAC,QAAQ,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC","sources":["webpack://task-fa11.20/./src/index.ts"],"sourcesContent":["interface Student {\n  name: string;\n  age: number;\n  scores: {\n    math: number;\n    english: number;\n    science: number;\n  };\n}\n\n// Mapped Type to create a readonly version of Student\ntype ReadonlyStudent = {\n  readonly [K in keyof Student]: Student[K];\n};\n\n// Conditional Type to check if a property is required or optional\ntype RequiredPropertyNames<T> = {\n  [K in keyof T]: T[K] extends undefined ? never : K;\n}[keyof T];\n\ntype OptionalPropertyNames<T> = {\n  [K in keyof T]: T[K] extends undefined ? K : never;\n}[keyof T];\n\ntype RequiredProperties<T> = Pick<T, RequiredPropertyNames<T>>;\ntype OptionalProperties<T> = Pick<T, OptionalPropertyNames<T>>;\n\nconst students: Student[] = [\n  {\n    name: \"John\",\n    age: 16,\n    scores: {\n      math: 90,\n      english: 85,\n      science: 88,\n    },\n  },\n  {\n    name: \"Jane\",\n    age: 17,\n    scores: {\n      math: 92,\n      english: 87,\n      science: 91,\n    },\n  },\n];\n\nfunction displayStudents(students: ReadonlyStudent[]) {\n  const studentsDiv = document.getElementById(\"students\")!;\n  studentsDiv.innerHTML = \"\"; // Clear existing content\n\n  students.forEach((student) => {\n    const studentDiv = document.createElement(\"div\");\n    studentDiv.className = \"student\";\n    studentDiv.textContent = `Name: ${student.name}, Age: ${student.age}, Math: ${student.scores.math}, English: ${student.scores.english}, Science: ${student.scores.science}`;\n    studentsDiv.appendChild(studentDiv);\n  });\n}\n\n// Initial display\ndisplayStudents(students);\n\ndocument.getElementById(\"add-student\")!.addEventListener(\"click\", () => {\n  const newStudent: Student = {\n    name: \"Alice\",\n    age: 18,\n    scores: {\n      math: 95,\n      english: 90,\n      science: 93,\n    },\n  };\n  students.push(newStudent);\n  displayStudents(students);\n});\n"],"names":[],"sourceRoot":""}